---
swagger: "2.0"
info:
  description: "This is a test API"
  version: "1.0.0"
  title: "Simple Product/City API"
  contact:
    email: "you@your-company.com"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/"
tags:
- name: "users"
  description: "User registration/login"
- name: "products"
  description: "Operations with products"
- name: "cities"
  description: "Operations with cities"
securityDefinitions:
  Bearer:
    description: |
      For accessing the API a valid JWT token must be passed in most of the queries in
      the 'Authorization' header.

      A valid JWT token is generated by the API and retourned as answer of a call
      to the route /oauth/token giving a valid email & password.

      The following syntax must be used in the 'Authorization' header

          Bearer xxxxxx.yyyyyyy.zzzzzz
    type: apiKey
    name: Authorization
    in: header
schemes:
- "https"
- "http"
paths:
  /register:
    post:
      tags:
      - "users"
      summary: "User register"
      description: "Create new user\n"
      operationId: "registerUser"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "created new user object"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
  /auth:
    post:
      tags:
      - "users"
      summary: "user authentication"
      description: "User authentication endpoint\n"
      operationId: "auth"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            type: "object"
            properties:
              code:
                type: "integer"
              message:
                type: "string"
              uuid:
                type: "string"
              token:
                type: "string"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
  /api/users:
    get:
      tags:
      - "users"
      summary: "list of users"
      description: "Get list of all users\n"
      operationId: "getUsers"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "list of users"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Users"
      security:
      - Bearer: []
  /api/products:
    get:
      tags:
      - "products"
      summary: "list of products"
      description: "Get list of all products\n"
      operationId: "getProducts"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "list of products"
          schema:
            type: "array"
            items: 
              $ref: "#/definitions/Product"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Products"
      security:
      - Bearer: []
    post:
      tags:
      - "products"
      summary: "create new product"
      description: "Create new product\n"
      operationId: "postProduct"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/Product"
      responses:
        200:
          description: "create new product"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Products"
      security:
      - Bearer: []
  /api/products/{uuid}:
    get:
      tags:
      - "products"
      summary: "search product by id"
      description: "Get product by id.\n"
      operationId: "getProductById"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "product uuid"
        required: true
        type: "string"
      responses:
        200:
          description: "search results matching criteria"
          schema:
            $ref: "#/definitions/Product"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Products"
      security:
      - Bearer: []
  /api/products/{uuid}/reviews:
    get:
      tags:
      - "products"
      summary: "list of product reviews"
      description: "List of product reviews.\n"
      operationId: "getProductReviews"
      produces:
      - "application/json"
      parameters:
      - name: "uuid"
        in: "path"
        description: "product uuid"
        required: true
        type: "string"
      responses:
        200:
          description: "all product reviews"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Product"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Products"
      security:
      - Bearer: []
  /api/cities:
    get:
      tags:
      - "cities"
      summary: "Get list of cities"
      description: "Return list of all reistered cities.\n"
      operationId: "getCities"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "all cities"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/City"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cities"
      security:
      - Bearer: []
    post:
      tags:
      - "cities"
      summary: "create new city"
      description: "Create new city object.\n"
      operationId: "postCity"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "new created city object"
          schema:
            $ref: "#/definitions/City"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cities"
      security:
      - Bearer: []
  /api/cities/{cityId}:
    put:
      tags:
      - "cities"
      summary: "searches inventory"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ inventory in the system\n"
      operationId: "putCity"
      produces:
      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "id of existing city object"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "update city object"
        required: false
        schema:
          $ref: "#/definitions/City"
      responses:
        200:
          description: "city object"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cities"
      security:
      - Bearer: []
    delete:
      tags:
      - "cities"
      summary: "delete existing city"
      description: "By passing in the appropriate options, you can search for\navailable\
        \ inventory in the system\n"
      operationId: "deleteCity"
      produces:
      - "application/json"
      parameters:
      - name: "cityId"
        in: "path"
        description: "id of existing city object"
        required: true
        type: "string"
      responses:
        200:
          description: "city successfully removed"
          schema:
            $ref: "#/definitions/inline_response_200"
        400:
          description: "Bad input parameter"
          schema:
            $ref: "#/definitions/Error"
        500:
          description: "Execution error"
          schema:
            $ref: "#/definitions/Error"
      x-swagger-router-controller: "Cities"
      security:
      - Bearer: []
definitions:
  User:
    type: "object"
    required:
    - "email"
    - "password"
    properties:
      uuid:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      email:
        type: "string"
        example: "any@mail.com"
      password:
        type: "string"
      token:
        type: "string"
    example:
      password: "password"
      uuid: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      email: "any@mail.com"
  Product:
    type: "object"
    properties:
      uuid:
        type: "string"
        format: "uuid"
        example: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      reviewId:
        type: "string"
      name:
        type: "string"
      description:
        type: "string"
      price:
        type: "string"
    example:
      price: "6"
      name: "name"
      description: "description"
      uuid: "d290f1ee-6c54-4b01-90e6-d701748f0851"
      reviewId: "0"
  City:
    type: "object"
    properties:
      name:
        type: "string"
      country:
        type: "string"
      location:
        $ref: "#/definitions/City_location"
      lastModifiedDate:
        type: "string"
        format: "date-time"
      capital:
        type: "boolean"
    example:
      country: "country"
      capital: true
      lastModifiedDate: "Fri Jun 29 2018 01:34:13 GMT+0300 (EEST)"
      name: "name"
      location:
        long: "52.097621"
        lat: "23.73405"
  Error:
    properties:
      status:
        type: "string"
      message:
        type: "string"
  inline_response_200:
    properties:
      code:
        type: "integer"
      message:
        type: "string"
      uuid:
        type: "string"
      token:
        type: "string"
    example:
      code: 0
      message: "message"
      uuid: "uuid"
      token: "token"
  City_location:
    properties:
      lat:
        type: "number"
      long:
        type: "number"
    example:
      long: "52.097621"
      lat: "23.73405"
